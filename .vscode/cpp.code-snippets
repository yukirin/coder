{
	// Place your coder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"prime_factor": {
		"prefix": "prime",
		"body": [
			"",
			"vector<ll_ll> prime_factor(ll n) {",
			"\tvector<ll_ll> res;",
			"\tfor (ll i = 2; i * i <= n; i++) {",
			"\t\tif (n % i) continue;",
			"\t\tres.emplace_back(i, 0);",
			"\t\twhile (n % i == 0) {",
			"\t\t\tn /= i;",
			"\t\t\tres.back().second++;",
			"\t\t}",
			"\t}",
			"",
			"\tif (n != 1) res.emplace_back(n, 1);",
			"\treturn res;",
			"}",
			"",
		],
		"description": "素因数分解を行う"
	},
	"divisor": {
		"prefix": "divisor",
		"body": [
			"",
			"vector<ll> divisor(ll n) {",
			"\tvector<ll> ret;",
			"\tfor (ll i = 1; i * i <= n; i++) {",
			"\t\tif (n % i) continue;",
			"\t\tret.push_back(i);",
			"\t\tif (i * i != n) ret.push_back(n / i);",
			"\t}",
			"",
			"\tsort(begin(ret), end(ret));",
			"\treturn ret;",
			"}",
			"",
		],
		"description": "約数列挙"
	},
	"isprime": {
		"prefix": "isprime",
		"body": [
			"",
			"bool is_prime(ll x) {",
			"\tif (x < 2) return false;",
			"\tfor (ll i = 2; i * i <= x; i++) {",
			"\t\tif (x % i == 0) return false;",
			"\t}",
			"",
			"\treturn true;",
			"}",
			"",
		],
		"description": "素数判定"
	},
	"UnionFind": {
		"prefix": "unionfind",
		"body": [
			"",
			"class UnionFind {",
			" private:",
			"  std::vector<ll> par;",
			"  std::vector<ll> siz;",
			"",
			" public:",
			"  UnionFind(ll sz_) : par(sz_), siz(sz_, 1LL) {",
			"    for (ll i = 0; i < sz_; i++) par[i] = i;",
			"  }",
			"",
			"  void reset(ll sz_) {",
			"    par.assign(sz_, 0LL);",
			"    siz.assign(sz_, 1LL);",
			"    for (ll i = 0; i < sz_; i++) par[i] = i;",
			"  }",
			"",
			"  ll find(ll x) {",
			"    if (par[x] == x) return x;",
			"    return par[x] = find(par[x]);",
			"  }",
			"",
			"  bool unite(ll x, ll y) {",
			"    x = find(x);",
			"    y = find(y);",
			"    if (x == y) return false;",
			"",
			"    if (siz[x] < siz[y]) std::swap(x, y);",
			"    siz[x] += siz[y];",
			"    par[y] = x;",
			"    return true;",
			"  }",
			"",
			"  bool same(ll x, ll y) { return find(x) == find(y); }",
			"  ll size(ll x) { return siz[find(x)]; }",
			"};",
			""
		],
		"description": "UnionFind木(union by size + path compression)"
	},
	"a^n mod p": {
		"prefix": "modpow",
		"body": [
			"",
			"ll modpow(ll a, ll n, ll p) {",
			"  ll res = 1;",
			"  while (n > 0) {",
			"    if (n & 1) res = res * a % p;",
			"    a = a * a % p;",
			"    n >>= 1;",
			"  }",
			"  return res;",
			"}",
			""
		],
		"description": "a^n mod p"
	},
	"a mod p inv": {
		"prefix": "modinv",
		"body": [
			"",
			"ll modinv(ll a, ll p) {",
			"  ll b = p, u = 1, v = 0;",
			"  while (b) {",
			"    ll t = a / b;",
			"    a -= t * b;",
			"    swap(a, b);",
			"    u -= t * v;",
			"    swap(u, v);",
			"  }",
			"",
			"  u %= p;",
			"  if (u < 0) u += p;",
			"  return u;",
			"}",
			""
		],
		"description": "a mod p の逆元"
	},
	"nCr mod p": {
		"prefix": "modcomb",
		"body": [
			"",
			"static constexpr int MAX = 510000;",
			"ll fac[MAX], finv[MAX], inv[MAX];",
			"",
			"// 前処理",
			"void comb_init() {",
			"  fac[0] = fac[1] = 1;",
			"  finv[0] = finv[1] = 1;",
			"  inv[1] = 1;",
			"  for (int i = 2; i < MAX; i++) {",
			"    fac[i] = fac[i - 1] * i % MOD;",
			"    inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;",
			"    finv[i] = finv[i - 1] * inv[i] % MOD;",
			"  }",
			"}",
			"",
			"// nCr mod p",
			"ll comb(int n, int k) {",
			"  if (n < k) return 0;",
			"  if (n < 0 || k < 0) return 0;",
			"  return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;",
			"}",
			""
		],
		"description": "nCr mod p"
	},
	"binary_meguru": {
		"prefix": "meguru",
		"body": [
			"",
			"template <class T> T binary_meguru(T ok, T ng, std::function<bool(T)> solve) {",
			"  while (abs(ok - ng) > 1) {",
			"    T mid = (ok + ng) / 2;",
			"    if (solve(mid))",
			"      ok = mid;",
			"    else",
			"      ng = mid;",
			"  }",
			"",
			"  return ok;",
			"}",
			""
		],
		"description": "めぐる式二分探索"
	},
	"prime_table": {
		"prefix": "primetable",
		"body": [
			"",
			"vector<bool> prime_table(int n) {",
			"  vector<bool> prime(n + 1, true);",
			"  if (n >= 0) prime[0] = false;",
			"  if (n >= 1) prime[1] = false;",
			"",
			"  for (int i = 2; i * i <= n; i++) {",
			"    if (!prime[i]) continue;",
			"    for (int j = i + i; j <= n; j += i) {",
			"      prime[j] = false;",
			"    }",
			"  }",
			"  return prime;",
			"}",
			""
		],
		"description": "素数テーブル"
	},
	"convert_base": {
		"prefix": "convertbase",
		"body": [
			"",
			"template <class T> vector<T> convert_base(T x, T b) {",
			"  vector<T> ret;",
			"  T t = 1, k = abs(b);",
			"  while (x) {",
			"    ret.emplace_back((x * t) % k);",
			"    if (ret.back() < 0) ret.back() += k;",
			"    x -= ret.back() * t;",
			"    x /= k;",
			"    t *= b / k;",
			"  }",
			"  if (ret.empty()) ret.emplace_back(0);",
			"  reverse(begin(ret), end(ret));",
			"  return ret;",
			"}",
			""
		],
		"description": "10進数xをb進数に変換"
	},
	"nPr": {
		"prefix": "npr",
		"body": [
			"",
			"template <class BidirectionalIterator>",
			"bool next_partial_permutation(BidirectionalIterator first, BidirectionalIterator last,",
			"                              BidirectionalIterator middle) {",
			"  reverse(middle, last);",
			"  return next_permutation(first, last);",
			"}",
			""
		],
		"description": "nPrの列挙"
	},
	"nCr": {
		"prefix": "ncr",
		"body": [
			"",
			"template <typename FI> void parted_rotate(FI first1, FI last1, FI first2, FI last2) {",
			"  if (first1 == last1 || first2 == last2) return;",
			"  FI next = first2;",
			"  while (first1 != next) {",
			"    std::iter_swap(first1++, next++);",
			"    if (first1 == last1) first1 = first2;",
			"    if (next == last2) {",
			"      next = first2;",
			"    } else if (first1 == first2) {",
			"      first2 = next;",
			"    }",
			"  }",
			"}",
			"",
			"template <typename BI> bool next_combination_imp(BI first1, BI last1, BI first2, BI last2) {",
			"  if (first1 == last1 || first2 == last2) return false;",
			"  auto target = last1;",
			"  --target;",
			"  auto last_elem = last2;",
			"  --last_elem;",
			"  // find right-most incrementable element: target",
			"  while (target != first1 && !(*target < *last_elem)) --target;",
			"  if (target == first1 && !(*target < *last_elem)) {",
			"    parted_rotate(first1, last1, first2, last2);",
			"    return false;",
			"  }",
			"  // find the next value to be incremented: *next",
			"  auto next = first2;",
			"  while (!(*target < *next)) ++next;",
			"  std::iter_swap(target++, next++);",
			"  parted_rotate(target, last1, next, last2);",
			"  return true;",
			"}",
			"",
			"// INVARIANT: is_sorted(first, mid) && is_sorted(mid, last)",
			"template <typename BI> inline bool next_combination(BI first, BI last, BI mid) {",
			"  return next_combination_imp(first, mid, mid, last);",
			"}",
			"",
			"// INVARIANT: is_sorted(first, mid) && is_sorted(mid, last)",
			"template <typename BI> inline bool prev_combination(BI first, BI last, BI mid) {",
			"  return next_combination_imp(mid, last, first, mid);",
			"}",
			""
		],
		"description": "nCrの列挙"
	},
	"timer": {
		"prefix": "timer",
		"body": [
			"",
			"  auto start = chrono::system_clock::now();",
			"",
			"  // ! Implement processing",
			"",
			"  auto end = chrono::system_clock::now();",
			"  auto msec = chrono::duration_cast<chrono::milliseconds>(end - start).count();",
			"  cout << msec << \"[ms]\\n\";",
			""
		],
		"description": "処理時間の計測"
	},
	"Imos2D": {
		"prefix": "imos2d",
		"body": [
			"",
			"template <class T> struct Imos2D {",
			"  int H, W;",
			"  vector<vector<T>> data;",
			"",
			"  Imos2D(int h, int w) : H(h + 1), W(w + 1), data(h + 1, vector<T>(w + 1, 0)) {}",
			"",
			"  // [sx, ex), [sy, ey) (Half-open section e.g. Not include ex and ey)",
			"  void add(int sy, int sx, int ey, int ex, T z) {",
			"    if (ey >= H || ex >= W) return;",
			"    data[sy][sx] += z;",
			"    data[sy][ex] -= z;",
			"    data[ey][sx] -= z;",
			"    data[ey][ex] += z;",
			"  }",
			"",
			"  void build() {",
			"    for (int i = 0; i < H; i++)",
			"      for (int j = 1; j < W; j++) {",
			"        data[i][j] += data[i][j - 1];",
			"      }",
			"    for (int i = 1; i < H; i++)",
			"      for (int j = 0; j < W; j++) {",
			"        data[i][j] += data[i - 1][j];",
			"      }",
			"  }",
			"",
			"  T query(int y, int x) { return data[y][x]; }",
			"};",
			""
		],
		"description": "2次元いもす法"
	},
	"CumulativeSum2D": {
		"prefix": "sum2d",
		"body": [
			"",
			"template <class T> struct CumulativeSum2D {",
			"  int H, W;",
			"  vector<vector<T>> data;",
			"",
			"  CumulativeSum2D(int h, int w) : H(h + 1), W(w + 1), data(h + 1, vector<T>(w + 1, 0)) {}",
			"",
			"  void add(int y, int x, T z) {",
			"    ++x, ++y;",
			"    if (y >= H || x >= W) return;",
			"    data[y][x] += z;",
			"  }",
			"",
			"  void build() {",
			"    for (int i = 1; i < H; i++)",
			"      for (int j = 1; j < W; j++) {",
			"        data[i][j] += data[i][j - 1] + data[i - 1][j] - data[i - 1][j - 1];",
			"      }",
			"  }",
			"",
			"  // [sx, gx), [sy, gy) (Half-open section e.g. Not include gx and gy)",
			"  T query(int sy, int sx, int gy, int gx) {",
			"    return (data[gy][gx] - data[sy][gx] - data[gy][sx] + data[sy][sx]);",
			"  }",
			"};",
			""
		],
		"description": "2次元累積和、矩形和を求める"
	},
	"Warshall Floyd": {
		"prefix": "warshallfloyd",
		"body": [
			"",
			"// warshall floyd (route restoration)",
			"// ! init process -> adj[i][i] = 0, adj[i][j] = inf -> (add edge)",
			"// ! init process -> next[i][j] = j",
			"template <class T> void warshall_floyd(vector<vector<T>>& adj, vector<vector<int>>& next) {",
			"  int s = sz(adj);",
			"  for (int k = 0; k < s; k++) {",
			"    for (int i = 0; i < s; i++) {",
			"      for (int j = 0; j < s; j++) {",
			"        if (adj[i][k] + adj[k][j] >= adj[i][j]) continue;",
			"        adj[i][j] = adj[i][k] + adj[k][j];",
			"        next[i][j] = next[i][k];",
			"      }",
			"    }",
			"  }",
			"}",
			"",
			"vector<int> route(int s, int g, vector<vector<int>>& next) {",
			"  vector<int> path;",
			"  for (int cur = s; cur != g; cur = next[cur][g]) path.pb(cur);",
			"  path.pb(g);",
			"  return path;",
			"}",
			""
		],
		"description": "全点対間最短路(経路復元付き)"
	},
	"Graph Template": {
		"prefix": "graph",
		"body": [
			"",
			"template <class T> struct Edge {",
			"  int src, to;",
			"  T cost;",
			"",
			"  Edge(int to, T cost) : src(-1), to(to), cost(cost) {}",
			"  Edge(int src, int to, T cost) : src(src), to(to), cost(cost) {}",
			"",
			"  Edge& operator=(const int& x) {",
			"    to = x;",
			"    return *this;",
			"  }",
			"",
			"  operator int() const { return to; }",
			"};",
			"",
			"template <class T> using Edges = vector<Edge<T>>;",
			"template <class T> using WeightedGraph = vector<Edges<T>>;",
			"using UnWeightedGraph = vector<vector<int>>;",
			"template <class T> using Matrix = vector<vector<T>>;",
			""
		],
		"description": "Graph Template"
	},
	"Dijkstra": {
		"prefix": "dijkstra",
		"body": [
			"",
			"// dijkstra (route restoration)",
			"// ! init process -> prev[i] = -1",
			"template <class T> vector<T> dijkstra(int s, WeightedGraph<T>& adj_list, vector<int>& prev, T inf) {",
			"  int si = sz(adj_list);",
			"  vector<T> dist(si, inf);",
			"",
			"  using Pi = pair<T, int>;",
			"  priority_queue<Pi, vector<Pi>, greater<Pi>> que;",
			"  dist[s] = 0;",
			"  que.emplace(dist[s], s);",
			"  while (!que.empty()) {",
			"    T cost;",
			"    int idx;",
			"    tie(cost, idx) = que.top();",
			"    que.pop();",
			"    if (dist[idx] < cost) continue;",
			"    for (auto& e : adj_list[idx]) {",
			"      auto next_cost = cost + e.cost;",
			"      if (dist[e.to] <= next_cost) continue;",
			"      dist[e.to] = next_cost;",
			"      prev[e.to] = idx;",
			"      que.emplace(dist[e.to], e.to);",
			"    }",
			"  }",
			"  return dist;",
			"}",
			"",
			"vector<int> route(int s, int g, vector<int>& prev) {",
			"  vector<int> path;",
			"  for (int cur = g; cur != -1; cur = prev[cur]) path.pb(cur);",
			"  reverse(all(path));",
			"  return path;",
			"}",
			""
		],
		"description": "単一始点全点間最短路(経路復元付き)"
	}
}