{
	// Place your coder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"prime_factor": {
		"prefix": "prime",
		"body": [
			"",
			"vector<ll_ll> prime_factor(ll n) {",
			"\tvector<ll_ll> res;",
			"\tfor (ll i = 2; i * i <= n; i++) {",
			"\t\tif (n % i) continue;",
			"\t\tres.emplace_back(i, 0);",
			"\t\twhile (n % i == 0) {",
			"\t\t\tn /= i;",
			"\t\t\tres.back().second++;",
			"\t\t}",
			"\t}",
			"",
			"\tif (n != 1) res.emplace_back(n, 1);",
			"\treturn res;",
			"}",
			"",
		],
		"description": "素因数分解を行う"
	},
	"divisor": {
		"prefix": "divisor",
		"body": [
			"",
			"vector<ll> divisor(ll n) {",
			"\tvector<ll> ret;",
			"\tfor (ll i = 1; i * i <= n; i++) {",
			"\t\tif (n % i) continue;",
			"\t\tret.push_back(i);",
			"\t\tif (i * i != n) ret.push_back(n / i);",
			"\t}",
			"",
			"\tsort(begin(ret), end(ret));",
			"\treturn ret;",
			"}",
			"",
		],
		"description": "約数列挙"
	},
	"isprime": {
		"prefix": "isprime",
		"body": [
			"",
			"bool is_prime(ll x) {",
			"\tif (x < 2) return false;",
			"\tfor (ll i = 2; i * i <= x; i++) {",
			"\t\tif (x % i == 0) return false;",
			"\t}",
			"",
			"\treturn true;",
			"}",
			"",
		],
		"description": "素数判定"
	},
	"UnionFind": {
		"prefix": "unionfind",
		"body": [
			"",
			"class UnionFind {",
			" private:",
			"  std::vector<ll> par;",
			"  std::vector<ll> siz;",
			"",
			" public:",
			"  UnionFind(ll sz_) : par(sz_), siz(sz_, 1LL) {",
			"    for (ll i = 0; i < sz_; i++) par[i] = i;",
			"  }",
			"",
			"  void reset(ll sz_) {",
			"    par.assign(sz_, 0LL);",
			"    siz.assign(sz_, 1LL);",
			"    for (ll i = 0; i < sz_; i++) par[i] = i;",
			"  }",
			"",
			"  ll find(ll x) {",
			"    if (par[x] == x) return x;",
			"    return par[x] = find(par[x]);",
			"  }",
			"",
			"  bool unite(ll x, ll y) {",
			"    x = find(x);",
			"    y = find(y);",
			"    if (x == y) return false;",
			"",
			"    if (siz[x] < siz[y]) std::swap(x, y);",
			"    siz[x] += siz[y];",
			"    par[y] = x;",
			"    return true;",
			"  }",
			"",
			"  bool same(ll x, ll y) { return find(x) == find(y); }",
			"  ll size(ll x) { return siz[find(x)]; }",
			"};",
			""
		],
		"description": "UnionFind木(union by size + path compression)"
	},
	"a^n mod p": {
		"prefix": "modpow",
		"body": [
			"",
			"ll modpow(ll a, ll n, ll p) {",
			"  ll res = 1;",
			"  while (n > 0) {",
			"    if (n & 1) res = res * a % p;",
			"    a = a * a % p;",
			"    n >>= 1;",
			"  }",
			"  return res;",
			"}",
			""
		],
		"description": "a^n mod p"
	},
	"a mod p inv": {
		"prefix": "modinv",
		"body": [
			"",
			"ll modinv(ll a, ll p) {",
			"  ll b = p, u = 1, v = 0;",
			"  while (b) {",
			"    ll t = a / b;",
			"    a -= t * b;",
			"    swap(a, b);",
			"    u -= t * v;",
			"    swap(u, v);",
			"  }",
			"",
			"  u %= p;",
			"  if (u < 0) u += p;",
			"  return u;",
			"}",
			""
		],
		"description": "a mod p の逆元"
	},
	"nCr mod p": {
		"prefix": "modcomb",
		"body": [
			"",
			"static constexpr int MAX = 510000;",
			"ll fac[MAX], finv[MAX], inv[MAX];",
			"",
			"// preprocess",
			"void comb_init() {",
			"  fac[0] = fac[1] = 1;",
			"  finv[0] = finv[1] = 1;",
			"  inv[1] = 1;",
			"  for (int i = 2; i < MAX; i++) {",
			"    fac[i] = fac[i - 1] * i % MOD;",
			"    inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;",
			"    finv[i] = finv[i - 1] * inv[i] % MOD;",
			"  }",
			"}",
			"",
			"// nCr mod p",
			"ll comb(int n, int k) {",
			"  if (n < k) return 0;",
			"  if (n < 0 || k < 0) return 0;",
			"  return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;",
			"}",
			""
		],
		"description": "nCr mod p"
	},
	"binary_meguru": {
		"prefix": "meguru",
		"body": [
			"",
			"template <class T> T binary_meguru(T ok, T ng, std::function<bool(T)> solve) {",
			"  while (abs(ok - ng) > 1) {",
			"    T mid = (ok + ng) / 2;",
			"    if (solve(mid))",
			"      ok = mid;",
			"    else",
			"      ng = mid;",
			"  }",
			"",
			"  return ok;",
			"}",
			""
		],
		"description": "めぐる式二分探索"
	},
	"prime_table": {
		"prefix": "primetable",
		"body": [
			"",
			"vector<bool> prime_table(int n) {",
			"  vector<bool> prime(n + 1, true);",
			"  if (n >= 0) prime[0] = false;",
			"  if (n >= 1) prime[1] = false;",
			"",
			"  for (int i = 2; i * i <= n; i++) {",
			"    if (!prime[i]) continue;",
			"    for (int j = i + i; j <= n; j += i) {",
			"      prime[j] = false;",
			"    }",
			"  }",
			"  return prime;",
			"}",
			""
		],
		"description": "素数テーブル"
	},
	"convert_base": {
		"prefix": "convertbase",
		"body": [
			"",
			"template <class T> vector<T> convert_base(T x, T b) {",
			"  vector<T> ret;",
			"  T t = 1, k = abs(b);",
			"  while (x) {",
			"    ret.emplace_back((x * t) % k);",
			"    if (ret.back() < 0) ret.back() += k;",
			"    x -= ret.back() * t;",
			"    x /= k;",
			"    t *= b / k;",
			"  }",
			"  if (ret.empty()) ret.emplace_back(0);",
			"  reverse(begin(ret), end(ret));",
			"  return ret;",
			"}",
			""
		],
		"description": "10進数xをb進数に変換"
	},
	"nPr": {
		"prefix": "npr",
		"body": [
			"",
			"template <class BidirectionalIterator>",
			"bool next_partial_permutation(BidirectionalIterator first, BidirectionalIterator last,",
			"                              BidirectionalIterator middle) {",
			"  reverse(middle, last);",
			"  return next_permutation(first, last);",
			"}",
			""
		],
		"description": "nPrの列挙"
	},
	"nCr": {
		"prefix": "ncr",
		"body": [
			"",
			"template <typename FI> void parted_rotate(FI first1, FI last1, FI first2, FI last2) {",
			"  if (first1 == last1 || first2 == last2) return;",
			"  FI next = first2;",
			"  while (first1 != next) {",
			"    std::iter_swap(first1++, next++);",
			"    if (first1 == last1) first1 = first2;",
			"    if (next == last2) {",
			"      next = first2;",
			"    } else if (first1 == first2) {",
			"      first2 = next;",
			"    }",
			"  }",
			"}",
			"",
			"template <typename BI> bool next_combination_imp(BI first1, BI last1, BI first2, BI last2) {",
			"  if (first1 == last1 || first2 == last2) return false;",
			"  auto target = last1;",
			"  --target;",
			"  auto last_elem = last2;",
			"  --last_elem;",
			"  // find right-most incrementable element: target",
			"  while (target != first1 && !(*target < *last_elem)) --target;",
			"  if (target == first1 && !(*target < *last_elem)) {",
			"    parted_rotate(first1, last1, first2, last2);",
			"    return false;",
			"  }",
			"  // find the next value to be incremented: *next",
			"  auto next = first2;",
			"  while (!(*target < *next)) ++next;",
			"  std::iter_swap(target++, next++);",
			"  parted_rotate(target, last1, next, last2);",
			"  return true;",
			"}",
			"",
			"// INVARIANT: is_sorted(first, mid) && is_sorted(mid, last)",
			"template <typename BI> inline bool next_combination(BI first, BI last, BI mid) {",
			"  return next_combination_imp(first, mid, mid, last);",
			"}",
			"",
			"// INVARIANT: is_sorted(first, mid) && is_sorted(mid, last)",
			"template <typename BI> inline bool prev_combination(BI first, BI last, BI mid) {",
			"  return next_combination_imp(mid, last, first, mid);",
			"}",
			""
		],
		"description": "nCrの列挙"
	},
	"timer": {
		"prefix": "timer",
		"body": [
			"",
			"  {",
			"    auto start = chrono::system_clock::now();",
			"",
			"    // ! Implement processing",
			"",
			"    auto end = chrono::system_clock::now();",
			"    auto msec = chrono::duration_cast<chrono::milliseconds>(end - start).count();",
			"    cout << msec << \"[ms]\\n\";",
			"  }",
			""
		],
		"description": "処理時間の計測"
	},
	"Imos2D": {
		"prefix": "imos2d",
		"body": [
			"",
			"template <class T> struct Imos2D {",
			"  int H, W;",
			"  vector<vector<T>> data;",
			"",
			"  Imos2D(int h, int w) : H(h + 1), W(w + 1), data(h + 1, vector<T>(w + 1, 0)) {}",
			"",
			"  // [sx, ex), [sy, ey) (Half-open section e.g. Not include ex and ey)",
			"  void add(int sy, int sx, int ey, int ex, T z) {",
			"    if (ey >= H || ex >= W) return;",
			"    data[sy][sx] += z;",
			"    data[sy][ex] -= z;",
			"    data[ey][sx] -= z;",
			"    data[ey][ex] += z;",
			"  }",
			"",
			"  void build() {",
			"    for (int i = 0; i < H; i++)",
			"      for (int j = 1; j < W; j++) {",
			"        data[i][j] += data[i][j - 1];",
			"      }",
			"    for (int i = 1; i < H; i++)",
			"      for (int j = 0; j < W; j++) {",
			"        data[i][j] += data[i - 1][j];",
			"      }",
			"  }",
			"",
			"  T query(int y, int x) { return data[y][x]; }",
			"};",
			""
		],
		"description": "2次元いもす法"
	},
	"CumulativeSum2D": {
		"prefix": "sum2d",
		"body": [
			"",
			"template <class T> struct CumulativeSum2D {",
			"  int H, W;",
			"  vector<vector<T>> data;",
			"",
			"  CumulativeSum2D(int h, int w) : H(h + 1), W(w + 1), data(h + 1, vector<T>(w + 1, 0)) {}",
			"",
			"  void add(int y, int x, T z) {",
			"    ++x, ++y;",
			"    if (y >= H || x >= W) return;",
			"    data[y][x] += z;",
			"  }",
			"",
			"  void build() {",
			"    for (int i = 1; i < H; i++)",
			"      for (int j = 1; j < W; j++) {",
			"        data[i][j] += data[i][j - 1] + data[i - 1][j] - data[i - 1][j - 1];",
			"      }",
			"  }",
			"",
			"  // [sx, gx), [sy, gy) (Half-open section e.g. Not include gx and gy)",
			"  T query(int sy, int sx, int gy, int gx) {",
			"    return (data[gy][gx] - data[sy][gx] - data[gy][sx] + data[sy][sx]);",
			"  }",
			"};",
			""
		],
		"description": "2次元累積和、矩形和を求める"
	},
	"Warshall Floyd": {
		"prefix": "warshallfloyd",
		"body": [
			"",
			"// warshall floyd (route restoration)",
			"// ! init process -> adj[i][i] = 0, adj[i][j] = inf -> (add edge)",
			"// ! init process -> next[i][j] = j",
			"template <class T> void warshall_floyd(Matrix<T>& adj, Matrix<int>& next) {",
			"  int s = sz(adj);",
			"  for (int k = 0; k < s; k++) {",
			"    for (int i = 0; i < s; i++) {",
			"      for (int j = 0; j < s; j++) {",
			"        if (adj[i][k] + adj[k][j] >= adj[i][j]) continue;",
			"        adj[i][j] = adj[i][k] + adj[k][j];",
			"        next[i][j] = next[i][k];",
			"      }",
			"    }",
			"  }",
			"}",
			"",
			"vector<int> route(int s, int g, Matrix<int>& next) {",
			"  vector<int> path;",
			"  for (int cur = s; cur != g; cur = next[cur][g]) path.pb(cur);",
			"  path.pb(g);",
			"  return path;",
			"}",
			""
		],
		"description": "全点対間最短路(経路復元付き)"
	},
	"Graph Template": {
		"prefix": "graph",
		"body": [
			"",
			"template <class T> struct Edge {",
			"  int src, to;",
			"  T cost;",
			"",
			"  Edge(int to, T cost) : src(-1), to(to), cost(cost) {}",
			"  Edge(int src, int to, T cost) : src(src), to(to), cost(cost) {}",
			"",
			"  Edge& operator=(const int& x) {",
			"    to = x;",
			"    return *this;",
			"  }",
			"",
			"  operator int() const { return to; }",
			"};",
			"",
			"template <class T> using Edges = vector<Edge<T>>;",
			"template <class T> using WeightedGraph = vector<Edges<T>>;",
			"using UnWeightedGraph = vector<vector<int>>;",
			"template <class T> using Matrix = vector<vector<T>>;",
			""
		],
		"description": "Graph Template"
	},
	"Dijkstra": {
		"prefix": "dijkstra",
		"body": [
			"",
			"// dijkstra (route restoration)",
			"// ! init process -> prev[i] = -1",
			"template <class T> vector<T> dijkstra(int s, WeightedGraph<T>& adj_list, vector<int>& prev, T inf) {",
			"  int si = sz(adj_list);",
			"  vector<T> dist(si, inf);",
			"",
			"  using Pi = pair<T, int>;",
			"  priority_queue<Pi, vector<Pi>, greater<Pi>> que;",
			"  dist[s] = 0;",
			"  que.emplace(dist[s], s);",
			"  while (!que.empty()) {",
			"    T cost;",
			"    int idx;",
			"    tie(cost, idx) = que.top();",
			"    que.pop();",
			"    if (dist[idx] < cost) continue;",
			"    for (auto& e : adj_list[idx]) {",
			"      auto next_cost = cost + e.cost;",
			"      if (dist[e.to] <= next_cost) continue;",
			"      dist[e.to] = next_cost;",
			"      prev[e.to] = idx;",
			"      que.emplace(dist[e.to], e.to);",
			"    }",
			"  }",
			"  return dist;",
			"}",
			"",
			"vector<int> route(int s, int g, vector<int>& prev) {",
			"  vector<int> path;",
			"  for (int cur = g; cur != -1; cur = prev[cur]) path.pb(cur);",
			"  reverse(all(path));",
			"  return path;",
			"}",
			""
		],
		"description": "単一始点全点間最短路(経路復元付き)"
	},
	"syakutori": {
		"prefix": "syakutori",
		"body": [
			"",
			"  int right = 0;",
			"  for (int left = 0; left < n; ++left) {",
			"    while (right < n && /*(right を 1 個進めたときに条件を満たす)*/) {",
			"      /* 実際に right を 1 進める */",
			"      // ex: sum += a[right];",
			"      ++right;",
			"    }",
			"",
			"    /* break した状態で right は条件を満たす最大なので、何かする */",
			"    // ex: res += (right - left);",
			"",
			"    /* left をインクリメントする準備 */",
			"    // ex: if (right == left) ++right;",
			"    // ex: else sum -= a[left];",
			"  }",
			""
		],
		"description": "しゃくとり法"
	},
	"Kruskal": {
		"prefix": "kruskal",
		"body": [
			"",
			"template <class T> T kruskal(Edges<T>& edges, int V) {",
			"  sort(begin(edges), end(edges), [](const Edge<T>& a, const Edge<T>& b) { return (a.cost < b.cost); });",
			"  UnionFind tree(V);",
			"  T ret = 0;",
			"  for (auto& e : edges) {",
			"    if (tree.unite(e.src, e.to)) ret += e.cost;",
			"  }",
			"  return (ret);",
			"}",
			""
		],
		"description": "最小全域木"
	},
	"SegmentTree": {
		"prefix": "segmenttree",
		"body": [
			"",
			"template <class Monoid> struct SegmentTree {",
			"  using F = function<Monoid(Monoid, Monoid)>;",
			"",
			"  int sz;",
			"  vector<Monoid> seg;",
			"",
			"  const F f;",
			"  const Monoid M1;",
			"",
			"  SegmentTree(int n, const F f, const Monoid& M1) : f(f), M1(M1) {",
			"    sz = 1;",
			"    while (sz < n) sz <<= 1;",
			"    seg.assign(2 * sz, M1);",
			"  }",
			"",
			"  void set(int k, const Monoid& x) { seg[k + sz] = x; }",
			"",
			"  void build() {",
			"    for (int k = sz - 1; k > 0; k--) {",
			"      seg[k] = f(seg[2 * k + 0], seg[2 * k + 1]);",
			"    }",
			"  }",
			"",
			"  void update(int k, const Monoid& x) {",
			"    k += sz;",
			"    seg[k] = x;",
			"    while (k >>= 1) {",
			"      seg[k] = f(seg[2 * k + 0], seg[2 * k + 1]);",
			"    }",
			"  }",
			"",
			"  Monoid query(int a, int b) {",
			"    Monoid L = M1, R = M1;",
			"    for (a += sz, b += sz; a < b; a >>= 1, b >>= 1) {",
			"      if (a & 1) L = f(L, seg[a++]);",
			"      if (b & 1) R = f(seg[--b], R);",
			"    }",
			"    return f(L, R);",
			"  }",
			"",
			"  Monoid operator[](const int& k) const { return seg[k + sz]; }",
			"",
			"  template <class C> int find_subtree(int a, const C& check, Monoid& M, bool type) {",
			"    while (a < sz) {",
			"      Monoid nxt = type ? f(seg[2 * a + type], M) : f(M, seg[2 * a + type]);",
			"      if (check(nxt))",
			"        a = 2 * a + type;",
			"      else",
			"        M = nxt, a = 2 * a + 1 - type;",
			"    }",
			"    return a - sz;",
			"  }",
			"",
			"  template <class C> int find_first(int a, const C& check) {",
			"    Monoid L = M1;",
			"    if (a <= 0) {",
			"      if (check(f(L, seg[1]))) return find_subtree(1, check, L, false);",
			"      return -1;",
			"    }",
			"    int b = sz;",
			"    for (a += sz, b += sz; a < b; a >>= 1, b >>= 1) {",
			"      if (a & 1) {",
			"        Monoid nxt = f(L, seg[a]);",
			"        if (check(nxt)) return find_subtree(a, check, L, false);",
			"        L = nxt;",
			"        ++a;",
			"      }",
			"    }",
			"    return -1;",
			"  }",
			"",
			"  template <class C> int find_last(int b, const C& check) {",
			"    Monoid R = M1;",
			"    if (b >= sz) {",
			"      if (check(f(seg[1], R))) return find_subtree(1, check, R, true);",
			"      return -1;",
			"    }",
			"    int a = sz;",
			"    for (b += sz; a < b; a >>= 1, b >>= 1) {",
			"      if (b & 1) {",
			"        Monoid nxt = f(seg[--b], R);",
			"        if (check(nxt)) return find_subtree(b, check, R, true);",
			"        R = nxt;",
			"      }",
			"    }",
			"    return -1;",
			"  }",
			"};",
			""
		],
		"description": "セグメント木"
	},
	"Nimk": {
		"prefix": "nimk",
		"body": [
			"",
			"// @return: true -> play first win, false -> play first lose",
			"bool Nimk(int k, vector<ll>& grundy_nums) {",
			"  for (int x = 0; x < 61; x++) {",
			"    int sum = 0;",
			"    ll digit = 1LL << x;",
			"    for (ll num : grundy_nums) {",
			"      if (!(num & digit)) continue;",
			"      sum++;",
			"    }",
			"    if (sum % (k + 1)) return true;",
			"  }",
			"  return false;",
			"}",
			""
		],
		"description": "Nimk, 一般的なNimはk = 1"
	},
	"Compress2D": {
		"prefix": "compress2d",
		"body": [
			"",
			"template <class T> struct Compress2D {",
			"  vector<T> xs, ys;",
			"",
			"  Compress2D() = default;",
			"",
			"  Compress2D(const vector<pair<T, T>>& vs) { add(vs); }",
			"",
			"  void add(const vector<pair<T, T>>& vs) {",
			"    for (const auto& p : vs) {",
			"      xs.emplace_back(p.first);",
			"      ys.emplace_back(p.second);",
			"    }",
			"  }",
			"",
			"  void add(const pair<T, T>& p) {",
			"    xs.emplace_back(p.first);",
			"    ys.emplace_back(p.second);",
			"  }",
			"",
			"  void build() {",
			"    sort(all(xs));",
			"    xs.erase(unique(all(xs)), end(xs));",
			"    sort(all(ys));",
			"    ys.erase(unique(all(ys)), end(ys));",
			"  }",
			"",
			"  vector<i_i> get(const vector<pair<T, T>>& vs) const {",
			"    vector<i_i> ret;",
			"    transform(all(vs), back_inserter(ret), [&](const pair<T, T>& p) {",
			"      return i_i{lower_bound(all(xs), p.first) - begin(xs), lower_bound(all(ys), p.second) - begin(ys)};",
			"    });",
			"    return ret;",
			"  }",
			"",
			"  i_i get(const pair<T, T>& p) const {",
			"    return i_i{lower_bound(all(xs), p.first) - begin(xs), lower_bound(all(ys), p.second) - begin(ys)};",
			"  }",
			"",
			"  pair<T, T> operator()(i_i p) const { return {xs[p.first], ys[p.second]}; }",
			"};",
			""
		],
		"description": "座標圧縮(2次元)"
	},
	"BellmanFord": {
		"prefix": "bellmanford",
		"body": [
			"",
			"template <class T> vector<T> bellman_ford(Edges<T>& edges, int V, int s, T inf) {",
			"  vector<T> dist(V, inf);",
			"  dist[s] = 0;",
			"  for (int i = 0; i < V - 1; i++) {",
			"    for (auto& e : edges) {",
			"      if (dist[e.src] == inf) continue;",
			"      dist[e.to] = min(dist[e.to], dist[e.src] + e.cost);",
			"    }",
			"  }",
			"  for (auto& e : edges) {",
			"    if (dist[e.src] == inf) continue;",
			"    if (dist[e.src] + e.cost < dist[e.to]) return vector<T>();",
			"  }",
			"  return dist;",
			"}",
			""
		],
		"description": "単一始点全点間最短路(負閉路検出=空vector)"
	},
	"TopologicalSort": {
		"prefix": "topologicalsort",
		"body": [
			"",
			"// @return -> not DAG if empty vector",
			"vector<int> topological_sort(UnWeightedGraph& adj_list) {",
			"  int v = sz(adj_list);",
			"  vec<int> ans;",
			"  vec<ll> counter(v, 0LL);",
			"  stack<int> st;",
			"  rep(i, 0, v) for (int to : adj_list[i]) counter[to]++;",
			"  rep(i, 0, v) if (counter[i] == 0LL) st.push(i);",
			"",
			"  while (st.size()) {",
			"    int cur = st.top();",
			"    st.pop();",
			"    ans.pb(cur);",
			"",
			"    for (int to : adj_list[cur]) {",
			"      counter[to]--;",
			"      if (counter[to] == 0LL) st.push(to);",
			"    }",
			"  }",
			"",
			"  if (sz(ans) != v) return vec<int>();",
			"  return ans;",
			"}",
			""
		],
		"description": "トポロジカルソート(閉路検出付)"
	},
	"nCrTable": {
		"prefix": "ncrtable",
		"body": [
			"",
			"template <class T> vector<vector<T> > binomial_table(int N) {",
			"  vector<vector<T> > mat(N + 1, vector<T>(N + 1));",
			"  for (int i = 0; i <= N; i++) {",
			"    for (int j = 0; j <= i; j++) {",
			"      if (j == 0 || j == i)",
			"        mat[i][j] = 1;",
			"      else",
			"        mat[i][j] = mat[i - 1][j - 1] + mat[i - 1][j];",
			"    }",
			"  }",
			"  return mat;",
			"}",
			""
		],
		"description": "nCrTable(二項係数テーブル)"
	},
	"Sum1D": {
		"prefix": "sum1d",
		"body": [
			"",
			"  // ! sum [left, right) = (a[left] + ... + a[right - 1]) -> s[right] - s[left]",
			"  vec<ll> s(n + 1, 0);",
			"  rep(i, 0, n) s[i + 1] = s[i] + a[i];",
			""
		],
		"description": "累積和"
	},
	"RollingHash": {
		"prefix": "rollinghash",
		"body": [
			"",
			"struct RollingHash {",
			"  static constexpr ll base1 = 1009LL;",
			"  static constexpr ll base2 = 2009LL;",
			"  static constexpr ll mod1 = 1000000007LL;",
			"  static constexpr ll mod2 = 1000000009LL;",
			"  string s;",
			"  int n;",
			"  vector<ll> hash1, hash2, pow1, pow2;",
			"  vector<int> sa;",
			"",
			"  RollingHash(const string& S)",
			"      : s(S), n(sz(S)), hash1(n + 1, 0), hash2(n + 1, 0), pow1(n + 1, 1), pow2(n + 1, 1) {",
			"    for (int i = 0; i < n; ++i) {",
			"      hash1[i + 1] = (hash1[i] * base1 + S[i]) % mod1;",
			"      hash2[i + 1] = (hash2[i] * base2 + S[i]) % mod2;",
			"      pow1[i + 1] = (pow1[i] * base1) % mod1;",
			"      pow2[i + 1] = (pow2[i] * base2) % mod2;",
			"    }",
			"  }",
			"",
			"  // S の [l, r) のハッシュ値を返す",
			"  inline pair<ll, ll> get(int l, int r) const {",
			"    ll res1 = hash1[r] - hash1[l] * pow1[r - l] % mod1;",
			"    if (res1 < 0) res1 += mod1;",
			"    ll res2 = hash2[r] - hash2[l] * pow2[r - l] % mod2;",
			"    if (res2 < 0) res2 += mod2;",
			"    return make_pair(res1, res2);",
			"  }",
			"",
			"  // S のハッシュ値を返す",
			"  inline pair<ll, ll> hash() const { return get(0, (int)hash1.size() - 1); }",
			"",
			"  // LCP (Longest Common Prefix) [a, sz(S)), [b, sz(S))",
			"  inline int getLCP(int a, int b) const {",
			"    int len = min((int)hash1.size() - a, (int)hash1.size() - b);",
			"    int low = 0, high = len;",
			"    while (high - low > 1) {",
			"      int mid = (low + high) >> 1;",
			"      if (get(a, a + mid) != get(b, b + mid))",
			"        high = mid;",
			"      else",
			"        low = mid;",
			"    }",
			"    return low;",
			"  }",
			"",
			"  // hash h1 と 長さ h2_len の文字列の hash h2 を結合",
			"  pair<ll, ll> concat(pair<ll, ll> h1, pair<ll, ll> h2, int h2_len) {",
			"    return make_pair((h1.first * pow1[h2_len] + h2.first) % mod1,",
			"                     (h1.second * pow2[h2_len] + h2.second) % mod2);",
			"  }",
			"",
			"  // [l, r)",
			"  bool match(int l1, int r1, int l2, int r2) { return get(l1, r1) == get(l2, r2); }",
			"",
			"  // [l, r)",
			"  bool match(int l, int r, ll_ll h) { return get(l, r) == h; }",
			"",
			"  // build Suffix Array",
			"  void buildSA() {",
			"    auto f = [this](int i, int j) {",
			"      int k = getLCP(i, j);",
			"      return i + k >= n ? true : j + k >= n ? false : s[i + k] <= s[j + k];",
			"    };",
			"",
			"    sa.assign(n, 0);",
			"    iota(all(sa), 0);",
			"    sort(all(sa), f);",
			"  }",
			"",
			"  // 文字列tを含む接尾辞(after buldSA)のindex(of sa)の下限と上限(半開区間)を返す",
			"  i_i lower_upper_bound(const string& t) {",
			"    int ts = sz(t);",
			"    auto lower_f = [this, &t](const int& i, const int& j) { return s.compare(max(i, j), n, t) < 0; };",
			"    auto upper_f = [this, &t, ts](const int& i, const int& j) {",
			"      int index = max(i, j);",
			"      return ts <= (n - index) && equal(all(t), begin(s) + index);",
			"    };",
			"",
			"    auto l_it = lower_bound(all(sa), -1, lower_f);",
			"    auto u_it = lower_bound(l_it, end(sa), -1, upper_f);",
			"    return make_pair(l_it - begin(sa), u_it - begin(sa));",
			"  }",
			"};",
			""
		],
		"description": "RollingHash"
	},
	"Manacher": {
		"prefix": "manacher",
		"body": [
			"",
			"vector<int> manacher(const string& s) {",
			"  int ss = sz(s);",
			"  vector<int> radius(ss);",
			"  int i = 0, j = 0;",
			"  while (i < ss) {",
			"    while (i - j >= 0 && i + j < ss && s[i - j] == s[i + j]) {",
			"      ++j;",
			"    }",
			"    radius[i] = j;",
			"    int k = 1;",
			"    while (i - k >= 0 && i + k < ss && k + radius[i - k] < j) {",
			"      radius[i + k] = radius[i - k];",
			"      ++k;",
			"    }",
			"    i += k;",
			"    j -= k;",
			"  }",
			"  return radius;",
			"}",
			""
		],
		"description": "Manacher(最長回分) 偶数長時はダミー挿入"
	},
	"ExtGcd": {
		"prefix": "extgcd",
		"body": [
			"",
			"// 拡張 Euclid の互除法",
			"// ap + bq = gcd(a, b) となる (p, q) を求め、d = gcd(a, b) をリターンします",
			"long long extGcd(long long a, long long b, long long& p, long long& q) {",
			"  if (b == 0) {",
			"    p = 1, q = 0;",
			"    return a;",
			"  }",
			"  long long d = extGcd(b, a % b, q, p);",
			"  q -= a / b * p;",
			"  return d;",
			"}",
			""
		],
		"description": "ExtGcd(拡張ユークリッドの互除法)"
	},
	"ChineseRem": {
		"prefix": "chineserem",
		"body": [
			"",
			"// 中国剰余定理",
			"// リターン値を (r, m) とすると解は x ≡ r (mod. m)",
			"// 解なしの場合は (0, -1) をリターン",
			"pair<long long, long long> ChineseRem(const vector<long long>& b, const vector<long long>& m) {",
			"  long long r = 0, M = 1;",
			"  for (int i = 0; i < (int)b.size(); ++i) {",
			"    long long p, q;",
			"    long long d = extGcd(M, m[i], p, q);  // p is inv of M/d (mod. m[i]/d)",
			"    if ((b[i] - r) % d != 0) return make_pair(0, -1);",
			"    long long tmp = (b[i] - r) / d * p % (m[i] / d);",
			"    r += M * tmp;",
			"    M *= m[i] / d;",
			"  }",
			"  return make_pair(mod(r, M), M);",
			"}",
			""
		],
		"description": "ChineseRem(中国剰余定理, 連立合同式を解く)"
	},
	"ModLCM": {
		"prefix": "modlcm",
		"body": [
			"",
			"ll modlcm(vector<ll>& ar, ll p) {",
			"  unordered_map<ll, ll> m;",
			"  for (ll num : ar) {",
			"    auto v = prime_factor(num);",
			"    for (ll_ll pa : v) chmax(m[pa.fi], pa.se);",
			"  }",
			"",
			"  ll ret = 1;",
			"  for (auto pa : m) {",
			"    ret *= modpow(pa.fi, pa.se, p);",
			"    ret %= p;",
			"  }",
			"",
			"  return ret;",
			"}",
			""
		],
		"description": "lcm mod p"
	},
	"nPr mod p": {
		"prefix": "modperm",
		"body": [
			"",
			"static constexpr int MAX = 510000;",
			"ll fac[MAX], finv[MAX], inv[MAX];",
			"",
			"// preprocess",
			"void perm_init() {",
			"  fac[0] = fac[1] = 1;",
			"  finv[0] = finv[1] = 1;",
			"  inv[1] = 1;",
			"  for (int i = 2; i < MAX; i++) {",
			"    fac[i] = fac[i - 1] * i % MOD;",
			"    inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;",
			"    finv[i] = finv[i - 1] * inv[i] % MOD;",
			"  }",
			"}",
			"",
			"// nPr mod p",
			"ll perm(int n, int k) {",
			"  if (n < k) return 0;",
			"  if (n < 0 || k < 0) return 0;",
			"  return (fac[n] * finv[n - k]) % MOD;",
			"}",
			""
		],
		"description": "nPr mod p"
	},
	"GridBFS": {
		"prefix": "gridbfs",
		"body": [
			"",
			"// Grid-BFS",
			"// Unreachable cells are -1",
			"vector<vector<int>> grid_bfs(vector<string>& s, const char start = 's', const char wall = '#') {",
			"  const int vx[] = {0, 1, 0, -1}, vy[] = {1, 0, -1, 0};",
			"  vector<vector<int>> min_cost(s.size(), vector<int>(s[0].size(), -1));",
			"  queue<pair<int, int>> que;",
			"  for (int i = 0; i < s.size(); i++) {",
			"    for (int j = 0; j < s[i].size(); j++) {",
			"      if (s[i][j] == start) {",
			"        que.emplace(i, j);",
			"        min_cost[i][j] = 0;",
			"      }",
			"    }",
			"  }",
			"  while (!que.empty()) {",
			"    auto p = que.front();",
			"    que.pop();",
			"    for (int i = 0; i < 4; i++) {",
			"      int ny = p.first + vy[i], nx = p.second + vx[i];",
			"      if (nx < 0 || ny < 0 || nx >= s[0].size() || ny >= s.size()) continue;",
			"      if (min_cost[ny][nx] != -1) continue;",
			"      if (s[ny][nx] == wall) continue;",
			"      min_cost[ny][nx] = min_cost[p.first][p.second] + 1;",
			"      que.emplace(ny, nx);",
			"    }",
			"  }",
			"  return min_cost;",
			"}",
			""
		],
		"description": "GridBFS"
	},
	"ConvertRootedTree": {
		"prefix": "convtree",
		"body": [
			"",
			"// 木gを根rから遠ざかる辺のみからなる根付き木に変換",
			"UnWeightedGraph convert_rooted_tree(const UnWeightedGraph& g, int r = 0) {",
			"  int N = (int)g.size();",
			"  UnWeightedGraph rg(N);",
			"  vector<int> v(N);",
			"  v[r] = 1;",
			"  queue<int> que;",
			"  que.emplace(r);",
			"  while (!que.empty()) {",
			"    auto p = que.front();",
			"    que.pop();",
			"    for (auto& to : g[p]) {",
			"      if (v[to] == 0) {",
			"        v[to] = 1;",
			"        que.emplace(to);",
			"        rg[p].emplace_back(to);",
			"      }",
			"    }",
			"  }",
			"  return rg;",
			"}",
			""
		],
		"description": "木を根付き木に変換"
	}
}