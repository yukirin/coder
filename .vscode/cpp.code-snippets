{
	// Place your coder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"prime_factor": {
		"prefix": "prime",
		"body": [
			"",
			"vector<ll_ll> prime_factor(ll n) {",
			"\tvector<ll_ll> res;",
			"\tfor (ll i = 2; i * i <= n; i++) {",
			"\t\tif (n % i) continue;",
			"\t\tres.emplace_back(i, 0);",
			"\t\twhile (n % i == 0) {",
			"\t\t\tn /= i;",
			"\t\t\tres.back().second++;",
			"\t\t}",
			"\t}",
			"",
			"\tif (n != 1) res.emplace_back(n, 1);",
			"\treturn res;",
			"}",
			"",
		],
		"description": "素因数分解を行う"
	},
	"divisor": {
		"prefix": "divisor",
		"body": [
			"",
			"vector<ll> divisor(ll n) {",
			"\tvector<ll> ret;",
			"\tfor (ll i = 1; i * i <= n; i++) {",
			"\t\tif (n % i) continue;",
			"\t\tret.push_back(i);",
			"\t\tif (i * i != n) ret.push_back(n / i);",
			"\t}",
			"",
			"\tsort(begin(ret), end(ret));",
			"\treturn ret;",
			"}",
			"",
		],
		"description": "約数列挙"
	},
	"isprime": {
		"prefix": "isprime",
		"body": [
			"",
			"bool is_prime(ll x) {",
			"\tif (x < 2) return false;",
			"\tfor (ll i = 2; i * i <= x; i++) {",
			"\t\tif (x % i == 0) return false;",
			"\t}",
			"",
			"\treturn true;",
			"}",
			"",
		],
		"description": "素数判定"
	},
	"UnionFind": {
		"prefix": "unionfind",
		"body": [
			"",
			"class UnionFind {",
			" private:",
			"  std::vector<ll> par;",
			"  std::vector<ll> siz;",
			"",
			" public:",
			"  UnionFind(ll sz_) : par(sz_), siz(sz_, 1LL) {",
			"    for (ll i = 0; i < sz_; i++) par[i] = i;",
			"  }",
			"",
			"  void reset(ll sz_) {",
			"    par.assign(sz_, 0LL);",
			"    siz.assign(sz_, 1LL);",
			"    for (ll i = 0; i < sz_; i++) par[i] = i;",
			"  }",
			"",
			"  ll find(ll x) {",
			"    if (par[x] == x) return x;",
			"    return par[x] = find(par[x]);",
			"  }",
			"",
			"  bool unite(ll x, ll y) {",
			"    x = find(x);",
			"    y = find(y);",
			"    if (x == y) return false;",
			"",
			"    if (siz[x] < siz[y]) std::swap(x, y);",
			"    siz[x] += siz[y];",
			"    par[y] = x;",
			"    return true;",
			"  }",
			"",
			"  bool same(ll x, ll y) { return find(x) == find(y); }",
			"  ll size(ll x) { return siz[find(x)]; }",
			"};",
			""
		],
		"description": "UnionFind木(union by size + path compression)"
	},
	"a^n mod p": {
		"prefix": "modpow",
		"body": [
			"",
			"ll modpow(ll a, ll n, ll p) {",
			"  ll res = 1;",
			"  while (n > 0) {",
			"    if (n & 1) res = res * a % p;",
			"    a = a * a % p;",
			"    n >>= 1;",
			"  }",
			"  return res;",
			"}",
			""
		],
		"description": "a^n mod p"
	},
	"a mod p inv": {
		"prefix": "modinv",
		"body": [
			"",
			"ll modinv(ll a, ll p) {",
			"  ll b = p, u = 1, v = 0;",
			"  while (b) {",
			"    ll t = a / b;",
			"    a -= t * b;",
			"    swap(a, b);",
			"    u -= t * v;",
			"    swap(u, v);",
			"  }",
			"",
			"  u %= p;",
			"  if (u < 0) u += p;",
			"  return u;",
			"}",
			""
		],
		"description": "a mod p の逆元"
	},
	"nCr mod p": {
		"prefix": "modcomb",
		"body": [
			"",
			"static constexpr int MAX = 510000;",
			"ll fac[MAX], finv[MAX], inv[MAX];",
			"",
			"// 前処理",
			"void comb_init() {",
			"  fac[0] = fac[1] = 1;",
			"  finv[0] = finv[1] = 1;",
			"  inv[1] = 1;",
			"  for (int i = 2; i < MAX; i++) {",
			"    fac[i] = fac[i - 1] * i % MOD;",
			"    inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;",
			"    finv[i] = finv[i - 1] * inv[i] % MOD;",
			"  }",
			"}",
			"",
			"// nCr mod p",
			"ll comb(int n, int k) {",
			"  if (n < k) return 0;",
			"  if (n < 0 || k < 0) return 0;",
			"  return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;",
			"}",
			""
		],
		"description": "nCr mod p"
	},
	"binary_meguru": {
		"prefix": "meguru",
		"body": [
			"",
			"template <class T> T binary_meguru(T ok, T ng, std::function<bool(T)> solve) {",
			"  while (abs(ok - ng) > 1) {",
			"    T mid = (ok + ng) / 2;",
			"    if (solve(mid))",
			"      ok = mid;",
			"    else",
			"      ng = mid;",
			"  }",
			"",
			"  return ok;",
			"}",
			""
		],
		"description": "めぐる式二分探索"
	},
	"prime_table": {
		"prefix": "primetable",
		"body": [
			"",
			"vector<bool> prime_table(int n) {",
			"  vector<bool> prime(n + 1, true);",
			"  if (n >= 0) prime[0] = false;",
			"  if (n >= 1) prime[1] = false;",
			"",
			"  for (int i = 2; i * i <= n; i++) {",
			"    if (!prime[i]) continue;",
			"    for (int j = i + i; j <= n; j += i) {",
			"      prime[j] = false;",
			"    }",
			"  }",
			"  return prime;",
			"}",
			""
		],
		"description": "素数テーブル"
	},
	"convert_base": {
		"prefix": "convertbase",
		"body": [
			"",
			"template <class T> vector<T> convert_base(T x, T b) {",
			"  vector<T> ret;",
			"  T t = 1, k = abs(b);",
			"  while (x) {",
			"    ret.emplace_back((x * t) % k);",
			"    if (ret.back() < 0) ret.back() += k;",
			"    x -= ret.back() * t;",
			"    x /= k;",
			"    t *= b / k;",
			"  }",
			"  if (ret.empty()) ret.emplace_back(0);",
			"  reverse(begin(ret), end(ret));",
			"  return ret;",
			"}",
			""
		],
		"description": "10進数xをb進数に変換"
	}
}